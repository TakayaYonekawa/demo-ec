{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { collection, doc, getDocs, setDoc } from \"firebase/firestore\";\nimport { db } from \"../../firebase\";\nlet cartItems = [];\nconst cartCollectionRef = collection(db, \"cart\");\ngetDocs(cartCollectionRef).then(querySnapshot => {\n  cartItems = querySnapshot.docs.map(doc => ({ ...doc.data(),\n    id: doc.id\n  }));\n});\nconst initialState = {\n  cartItems: [],\n  newCartItem: []\n};\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    addCart: async (state, action) => {\n      const cartDocumentRef = doc(collection(db, \"cart\"));\n      state.cartItems = cartItems;\n      state.newCartItem = action.payload;\n      await setDoc(cartDocumentRef, {\n        id: state.newCartItem.id,\n        image: state.newCartItem.image,\n        price: state.newCartItem.price,\n        title: state.newCartItem.title\n      }); //   await setDoc(cartCollectionRef, state.newCartItem);\n\n      console.log(cartDocumentRef.data);\n    }\n  }\n});\nexport const {\n  addCart\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","collection","doc","getDocs","setDoc","db","cartItems","cartCollectionRef","then","querySnapshot","docs","map","data","id","initialState","newCartItem","cartSlice","name","reducers","addCart","state","action","cartDocumentRef","payload","image","price","title","console","log","actions","reducer"],"sources":["/Users/yonekawatakashinari/Desktop/js-practice/yone-ec-siteのコピー/src/redux/cart/cartSlice.tsx"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { collection, doc, getDocs, setDoc } from \"firebase/firestore\";\nimport { db } from \"../../firebase\";\n\ntype apiArray = {\n  id: number | string;\n  // title: string;\n  // price: number;\n  // image: string;\n};\n\nlet cartItems: apiArray[] = [];\nconst cartCollectionRef = collection(db, \"cart\");\ngetDocs(cartCollectionRef).then((querySnapshot) => {\n  cartItems = querySnapshot.docs.map((doc) => ({ ...doc.data(), id: doc.id }));\n});\n\nconst initialState: any = {\n  cartItems: [],\n  newCartItem:[],\n};\n\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    addCart: async (state, action) => {\n        const cartDocumentRef = doc(collection(db, \"cart\"));\n\n        state.cartItems = cartItems;\n        state.newCartItem = action.payload;\n        await setDoc(cartDocumentRef, {\n          id: state.newCartItem.id,\n          image: state.newCartItem.image,\n          price: state.newCartItem.price,\n          title: state.newCartItem.title,\n        });\n        //   await setDoc(cartCollectionRef, state.newCartItem);\n\n      console.log(cartDocumentRef.data);\n    },\n  },\n});\n\nexport const { addCart } = cartSlice.actions;\nexport default cartSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,UAAT,EAAqBC,GAArB,EAA0BC,OAA1B,EAAmCC,MAAnC,QAAiD,oBAAjD;AACA,SAASC,EAAT,QAAmB,gBAAnB;AASA,IAAIC,SAAqB,GAAG,EAA5B;AACA,MAAMC,iBAAiB,GAAGN,UAAU,CAACI,EAAD,EAAK,MAAL,CAApC;AACAF,OAAO,CAACI,iBAAD,CAAP,CAA2BC,IAA3B,CAAiCC,aAAD,IAAmB;EACjDH,SAAS,GAAGG,aAAa,CAACC,IAAd,CAAmBC,GAAnB,CAAwBT,GAAD,KAAU,EAAE,GAAGA,GAAG,CAACU,IAAJ,EAAL;IAAiBC,EAAE,EAAEX,GAAG,CAACW;EAAzB,CAAV,CAAvB,CAAZ;AACD,CAFD;AAIA,MAAMC,YAAiB,GAAG;EACxBR,SAAS,EAAE,EADa;EAExBS,WAAW,EAAC;AAFY,CAA1B;AAKA,MAAMC,SAAS,GAAGhB,WAAW,CAAC;EAC5BiB,IAAI,EAAE,MADsB;EAE5BH,YAF4B;EAG5BI,QAAQ,EAAE;IACRC,OAAO,EAAE,OAAOC,KAAP,EAAcC,MAAd,KAAyB;MAC9B,MAAMC,eAAe,GAAGpB,GAAG,CAACD,UAAU,CAACI,EAAD,EAAK,MAAL,CAAX,CAA3B;MAEAe,KAAK,CAACd,SAAN,GAAkBA,SAAlB;MACAc,KAAK,CAACL,WAAN,GAAoBM,MAAM,CAACE,OAA3B;MACA,MAAMnB,MAAM,CAACkB,eAAD,EAAkB;QAC5BT,EAAE,EAAEO,KAAK,CAACL,WAAN,CAAkBF,EADM;QAE5BW,KAAK,EAAEJ,KAAK,CAACL,WAAN,CAAkBS,KAFG;QAG5BC,KAAK,EAAEL,KAAK,CAACL,WAAN,CAAkBU,KAHG;QAI5BC,KAAK,EAAEN,KAAK,CAACL,WAAN,CAAkBW;MAJG,CAAlB,CAAZ,CAL8B,CAW9B;;MAEFC,OAAO,CAACC,GAAR,CAAYN,eAAe,CAACV,IAA5B;IACD;EAfO;AAHkB,CAAD,CAA7B;AAsBA,OAAO,MAAM;EAAEO;AAAF,IAAcH,SAAS,CAACa,OAA9B;AACP,eAAeb,SAAS,CAACc,OAAzB"},"metadata":{},"sourceType":"module"}