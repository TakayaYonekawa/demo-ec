{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { collection, getDocs, setDoc } from \"firebase/firestore\";\nimport { db } from \"../../firebase\";\nlet cartItems = [];\nconst cartCollectionRef = collection(db, \"cart\");\ngetDocs(cartCollectionRef).then(querySnapshot => {\n  cartItems = querySnapshot.docs.map(doc => ({ ...doc.data(),\n    id: doc.id\n  }));\n});\nconst initialState = {\n  cartItems: [],\n  newCartItem: []\n};\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    addCart: async (state, action) => {\n      state.cartItems = cartItems;\n      state.newCartItem = action.payload;\n      await setDoc(cartCollectionRef, {\n        id: state.newCartItem.id,\n        title: state.newCartItem.title,\n        price: state.newCartItem.price,\n        image: state.newCartItem.image\n      }); //   await setDoc(cartCollectionRef, state.newCartItem);\n\n      console.log(cartCollectionRef);\n    }\n  }\n});\nexport const {\n  addCart\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","collection","getDocs","setDoc","db","cartItems","cartCollectionRef","then","querySnapshot","docs","map","doc","data","id","initialState","newCartItem","cartSlice","name","reducers","addCart","state","action","payload","title","price","image","console","log","actions","reducer"],"sources":["/Users/yonekawatakashinari/Desktop/js-practice/yone-ec-siteのコピー/src/redux/cart/cartSlice.tsx"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { collection, getDocs, setDoc } from \"firebase/firestore\";\nimport { db } from \"../../firebase\";\n\ntype apiArray = {\n  id: number | string;\n  // title: string;\n  // price: number;\n  // image: string;\n};\n\nlet cartItems: apiArray[] = [];\nconst cartCollectionRef = collection(db, \"cart\");\ngetDocs(cartCollectionRef).then((querySnapshot) => {\n  cartItems = querySnapshot.docs.map((doc) => ({ ...doc.data(), id: doc.id }));\n});\n\nconst initialState: any = {\n  cartItems: [],\n  newCartItem:[],\n};\n\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    addCart: \n    \n    async (state, action) => {\n        state.cartItems = cartItems;\n        state.newCartItem = action.payload;\n        await setDoc(cartCollectionRef, {\n          id: state.newCartItem.id,\n          title: state.newCartItem.title,\n          price: state.newCartItem.price,\n          image: state.newCartItem.image,\n        });\n        //   await setDoc(cartCollectionRef, state.newCartItem);\n\n      console.log(cartCollectionRef);\n    },\n  },\n});\n\nexport const { addCart } = cartSlice.actions;\nexport default cartSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,UAAT,EAAqBC,OAArB,EAA8BC,MAA9B,QAA4C,oBAA5C;AACA,SAASC,EAAT,QAAmB,gBAAnB;AASA,IAAIC,SAAqB,GAAG,EAA5B;AACA,MAAMC,iBAAiB,GAAGL,UAAU,CAACG,EAAD,EAAK,MAAL,CAApC;AACAF,OAAO,CAACI,iBAAD,CAAP,CAA2BC,IAA3B,CAAiCC,aAAD,IAAmB;EACjDH,SAAS,GAAGG,aAAa,CAACC,IAAd,CAAmBC,GAAnB,CAAwBC,GAAD,KAAU,EAAE,GAAGA,GAAG,CAACC,IAAJ,EAAL;IAAiBC,EAAE,EAAEF,GAAG,CAACE;EAAzB,CAAV,CAAvB,CAAZ;AACD,CAFD;AAIA,MAAMC,YAAiB,GAAG;EACxBT,SAAS,EAAE,EADa;EAExBU,WAAW,EAAC;AAFY,CAA1B;AAKA,MAAMC,SAAS,GAAGhB,WAAW,CAAC;EAC5BiB,IAAI,EAAE,MADsB;EAE5BH,YAF4B;EAG5BI,QAAQ,EAAE;IACRC,OAAO,EAEP,OAAOC,KAAP,EAAcC,MAAd,KAAyB;MACrBD,KAAK,CAACf,SAAN,GAAkBA,SAAlB;MACAe,KAAK,CAACL,WAAN,GAAoBM,MAAM,CAACC,OAA3B;MACA,MAAMnB,MAAM,CAACG,iBAAD,EAAoB;QAC9BO,EAAE,EAAEO,KAAK,CAACL,WAAN,CAAkBF,EADQ;QAE9BU,KAAK,EAAEH,KAAK,CAACL,WAAN,CAAkBQ,KAFK;QAG9BC,KAAK,EAAEJ,KAAK,CAACL,WAAN,CAAkBS,KAHK;QAI9BC,KAAK,EAAEL,KAAK,CAACL,WAAN,CAAkBU;MAJK,CAApB,CAAZ,CAHqB,CASrB;;MAEFC,OAAO,CAACC,GAAR,CAAYrB,iBAAZ;IACD;EAfO;AAHkB,CAAD,CAA7B;AAsBA,OAAO,MAAM;EAAEa;AAAF,IAAcH,SAAS,CAACY,OAA9B;AACP,eAAeZ,SAAS,CAACa,OAAzB"},"metadata":{},"sourceType":"module"}