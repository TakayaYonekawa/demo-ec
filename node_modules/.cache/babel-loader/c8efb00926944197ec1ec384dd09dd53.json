{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nlet arr = localStorage.getItem('cartItems');\nconst initialState = {\n  _cartItems: [],\n\n  get cartItems() {\n    return this._cartItems;\n  },\n\n  set cartItems(value) {\n    this._cartItems = value;\n  },\n\n  cartShow: [],\n  totalPrice: 0,\n  totalAmount: 0\n};\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    addCart: (state, action) => {\n      let current = [{ ...state.cartItems\n      }];\n\n      if (arr !== null) {\n        current = JSON.parse(arr);\n      }\n\n      current.push(action.payload);\n      let cartArray = JSON.stringify(current);\n      localStorage.setItem('cartItems', cartArray);\n      arr = localStorage.getItem('cartItems');\n      state.cartItems = arr;\n      window.location.reload();\n      alert('カートへ追加が完了しました。');\n    },\n    removeAll: state => {\n      state.cartItems = [];\n      localStorage.setItem('cartItems', JSON.stringify(state.cartItems));\n      window.location.reload();\n    },\n    removeItem: (state, action) => {\n      const itemId = action.payload;\n      state.cartShow = state.cartShow.filter(item => item.id !== itemId);\n      localStorage.setItem('cartItems', JSON.stringify(state.cartShow));\n      window.location.reload();\n    },\n    handleCart: state => {\n      arr = localStorage.getItem('cartItems');\n\n      if (arr !== null) {\n        state.cartItems = JSON.parse(arr); // 重複表示回避\n\n        let map = new Map(state.cartItems.map(o => [o.id, o]));\n        state.cartShow = Array.from(map.values());\n      }\n    },\n    handleTotalAmount: state => {\n      let current = [{ ...state.cartItems\n      }];\n\n      if (arr !== null) {\n        current = JSON.parse(arr);\n      }\n\n      state.totalAmount = current.length;\n    },\n    handleTotalPrice: state => {\n      let total = 0;\n      state.cartItems.forEach(item => {\n        total += item.price;\n      }); //新しい状態に更新\n\n      state.totalPrice = total;\n    }\n  }\n});\nexport const {\n  addCart,\n  removeAll,\n  removeItem,\n  handleCart,\n  handleTotalAmount,\n  handleTotalPrice\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","arr","localStorage","getItem","initialState","_cartItems","cartItems","value","cartShow","totalPrice","totalAmount","cartSlice","name","reducers","addCart","state","action","current","JSON","parse","push","payload","cartArray","stringify","setItem","window","location","reload","alert","removeAll","removeItem","itemId","filter","item","id","handleCart","map","Map","o","Array","from","values","handleTotalAmount","length","handleTotalPrice","total","forEach","price","actions","reducer"],"sources":["/Users/yonekawatakashinari/Desktop/js-practice/yone-ec-site/src/redux/cart/cartSlice.tsx"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\ntype apiArray = {\n  id: number | string;\n  title: string;\n  price: number;\n  image: string;\n};\n\n//stateの型を記述する\nexport interface apiState {\n  cartItems: {\n    id: number | string;\n    title: string;\n    price: number;\n    image: string;\n  };\n  cartShow: {\n    id: number | string;\n    title: string;\n    price: number;\n    image: string;\n  };\n  totalPrice: number\n  totalAmount: number;\n}\n\nlet arr = localStorage.getItem('cartItems');\n\n\nconst initialState: apiState = {\n  _cartItems: [],\n  get cartItems() {\n    return this._cartItems;\n  },\n  set cartItems(value) {\n    this._cartItems = value;\n  },\n  cartShow: [],\n  totalPrice: 0,\n  totalAmount: 0,\n};\n\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    addCart:  (state, action) => {\n\n      let current = [{...state.cartItems}]\n      if(arr !== null){\n        current= JSON.parse(arr);       \n      }\n      current.push(action.payload);\n      let cartArray:any = JSON.stringify(current);\n      localStorage.setItem('cartItems', cartArray);\n      arr = localStorage.getItem('cartItems');\n      state.cartItems = arr;\n       window.location.reload();\n      alert('カートへ追加が完了しました。')\n\n    },\n    removeAll: (state) => {\n      state.cartItems = [];\n      localStorage.setItem('cartItems', JSON.stringify(state.cartItems));\n\n      window.location.reload();\n\n    },\n    removeItem:(state, action) => {\n      const itemId = action.payload;\n      state.cartShow = state.cartShow.filter((item:any) => item.id !== itemId);\n      localStorage.setItem('cartItems', JSON.stringify(state.cartShow));\n      window.location.reload();\n\n    },\n    handleCart:(state) => {\n      arr = localStorage.getItem('cartItems');\n      if(arr !== null){\n        state.cartItems = JSON.parse(arr);\n\n        // 重複表示回避\n        let map = new Map(state.cartItems.map((o:any) => [o.id, o]));\n        state.cartShow = Array.from(map.values())\n      }\n      \n    },\n    handleTotalAmount: (state) => {\n      let current = [{...state.cartItems}]\n      if(arr !== null){current= JSON.parse(arr);}\n        state.totalAmount = current.length;\n    },\n    handleTotalPrice: (state) => {\n      let total:number = 0;\n      state.cartItems.forEach((item:any) => {\n        total += item.price;\n      });\n      //新しい状態に更新\n      state.totalPrice = total;\n    }\n  },\n});\n\nexport const { addCart, removeAll ,removeItem, handleCart,handleTotalAmount,handleTotalPrice } = cartSlice.actions;\nexport default cartSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}