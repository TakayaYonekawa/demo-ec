{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { collection, doc, getDocs, setDoc } from \"firebase/firestore\";\nimport { db } from \"../../firebase\";\nlet cartItems = [];\n\nconst handleData = async () => {\n  const cartCollectionRef = collection(db, \"cart\");\n  await getDocs(cartCollectionRef).then(querySnapshot => {\n    cartItems = querySnapshot.docs.map(doc => ({ ...doc.data(),\n      id: doc.id\n    }));\n  });\n};\n\nconst initialState = {\n  cartItems: []\n};\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    addCart: async (state, action) => {\n      handleData();\n      state.cartItems = cartItems;\n      const cartDocumentRef = doc(collection(db, \"cart\"));\n      const newCartItem = action.payload;\n      await setDoc(cartDocumentRef, newCartItem); //   await setDoc(cartCollectionRef, state.newCartItem);\n      //   console.log(cartDocumentRef);\n    },\n    handleCart: state => {\n      state.cartItems = cartItems;\n    }\n  }\n});\nexport const {\n  addCart,\n  handleCart\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","collection","doc","getDocs","setDoc","db","cartItems","handleData","cartCollectionRef","then","querySnapshot","docs","map","data","id","initialState","cartSlice","name","reducers","addCart","state","action","cartDocumentRef","newCartItem","payload","handleCart","actions","reducer"],"sources":["/Users/yonekawatakashinari/Desktop/js-practice/yone-ec-siteのコピー/src/redux/cart/cartSlice.tsx"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { collection, doc, getDocs, setDoc } from \"firebase/firestore\";\nimport { db } from \"../../firebase\";\n\ntype apiArray = {\n  id: number | string;\n  // title: string;\n  // price: number;\n  // image: string;\n};\n\nlet cartItems: apiArray[] = [];\n\nconst handleData = async() => {\n  const cartCollectionRef = collection(db, \"cart\");\n  await getDocs(cartCollectionRef).then((querySnapshot) => {\n    cartItems = querySnapshot.docs.map((doc) => ({ ...doc.data(), id: doc.id }));\n    \n  });\n  \n}\n\nconst initialState: any = {\n  cartItems: [],\n};\n\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    addCart: async (state, action) => {\n      handleData();\n      state.cartItems = cartItems;\n      const cartDocumentRef = doc(collection(db, \"cart\"));\n      const newCartItem = action.payload;\n      await setDoc(cartDocumentRef, newCartItem);\n      //   await setDoc(cartCollectionRef, state.newCartItem);\n\n    //   console.log(cartDocumentRef);\n    },\n    handleCart: (state) => {\n      state.cartItems = cartItems;\n    }\n  },\n});\n\nexport const { addCart, handleCart } = cartSlice.actions;\nexport default cartSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,UAAT,EAAqBC,GAArB,EAA0BC,OAA1B,EAAmCC,MAAnC,QAAiD,oBAAjD;AACA,SAASC,EAAT,QAAmB,gBAAnB;AASA,IAAIC,SAAqB,GAAG,EAA5B;;AAEA,MAAMC,UAAU,GAAG,YAAW;EAC5B,MAAMC,iBAAiB,GAAGP,UAAU,CAACI,EAAD,EAAK,MAAL,CAApC;EACA,MAAMF,OAAO,CAACK,iBAAD,CAAP,CAA2BC,IAA3B,CAAiCC,aAAD,IAAmB;IACvDJ,SAAS,GAAGI,aAAa,CAACC,IAAd,CAAmBC,GAAnB,CAAwBV,GAAD,KAAU,EAAE,GAAGA,GAAG,CAACW,IAAJ,EAAL;MAAiBC,EAAE,EAAEZ,GAAG,CAACY;IAAzB,CAAV,CAAvB,CAAZ;EAED,CAHK,CAAN;AAKD,CAPD;;AASA,MAAMC,YAAiB,GAAG;EACxBT,SAAS,EAAE;AADa,CAA1B;AAIA,MAAMU,SAAS,GAAGhB,WAAW,CAAC;EAC5BiB,IAAI,EAAE,MADsB;EAE5BF,YAF4B;EAG5BG,QAAQ,EAAE;IACRC,OAAO,EAAE,OAAOC,KAAP,EAAcC,MAAd,KAAyB;MAChCd,UAAU;MACVa,KAAK,CAACd,SAAN,GAAkBA,SAAlB;MACA,MAAMgB,eAAe,GAAGpB,GAAG,CAACD,UAAU,CAACI,EAAD,EAAK,MAAL,CAAX,CAA3B;MACA,MAAMkB,WAAW,GAAGF,MAAM,CAACG,OAA3B;MACA,MAAMpB,MAAM,CAACkB,eAAD,EAAkBC,WAAlB,CAAZ,CALgC,CAMhC;MAEF;IACC,CAVO;IAWRE,UAAU,EAAGL,KAAD,IAAW;MACrBA,KAAK,CAACd,SAAN,GAAkBA,SAAlB;IACD;EAbO;AAHkB,CAAD,CAA7B;AAoBA,OAAO,MAAM;EAAEa,OAAF;EAAWM;AAAX,IAA0BT,SAAS,CAACU,OAA1C;AACP,eAAeV,SAAS,CAACW,OAAzB"},"metadata":{},"sourceType":"module"}